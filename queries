Query writing basics


CONSIDERATIONS

A SQL script can have one ore many queries. Before composing your statements, consider these questions...
- What does your query do?
- What table within the database are you requesting data from? 
- What fields within that table are you interested in? 
- Do you want to exclude any data or filter or omit any range or time period?



CREATING COMMENTS

Best practice: put a comment before any SQL statement you compose
Use plain or natural language to describe each written query 
2 ways to write them…
- Start with two dashes followed by a comment: — THIS IS A COMMENT 
- Create a comment block — /*, return 2 lines down, then */ — whatever goes between there is a comment 
  Format a comment by denoting who created it — e.g., 
   {
    CREATED BY: Your-First-Name Your-Last-Name
    CREATE DATE: MM/DD/YYYY 
    DESCRIPTION: This Is the Structure of a Basic Query 
   }



COMMAND WRITING

Separate commands with commas and a return — e.g.,

{
 SELECT
   FirstName,
   LastName,
   Email

 FROM 
   Customer
}



CLAUSES

FROM clause points in the direction of the data (i.e., which table)

SELECT clause specifies the columns from the table

LIMIT clause restricts the # of rows to the number provided (e.g., LIMIT 10)

ORDER BY clause specifies that a statement returns a result with the rows ordered by the values of one or more columns

 Descending order (A-Z) is the default ORDER BY order
  - ASC can be added to the right of a column item to sort in ascending order 
  - DESC reverses this to descending order (Z-A)

WHERE clause is used to filter results by specifying conditions each row must meet to be included in the result
 - This clause uses Operator Types to specify conditions (see below)
 - It can also introduce conditions involving fields 
 - It comes after the FROM clause and before the GROUP BY and ORDER BY clauses
 - Can't be used to create a condition based on an aggregate function

CASE clause impliments conditional logic within a statement, acting like an "if-then" parameter

ELSE clause is used to capture items outside previously specified cateogires (e.g., defined dollar amounts)
 - In other words, it specifies a catch-all outcome following IF-THEN logic

END AS clause creaes an alias for the CASE statement clause called "PurhcaseType"

JOIN
 - This clause combinea rows from two or more tables, based on a related column between them 

ON (useful with JOIN)
 - Provides a query with a link between two joined tables 

INNER JOIN
 - Used to combine rows from two or more tables where there are matching values in a specified column across the tables
 - Retrieves only the rows that have corresponding data in both tables based on a common field between them
 - Most common type of JOIN; used to retrieve related data from multiple tables where there's a clear connection btw them 
 - Only reutrns matching records (any unmatched data from the specified talbes is ignored)

LEFT JOIN (depends on order listed in a statement)
 - Combines all records from the Left table with matching records from the Right table 

Right JOIN (depends on order listed in a statement)
 - Combines all records from the Right table with matching records from the LEFT table 
 - SQLite does not support Right Outer Joins 

GROUP BY 
- This clause is used to organize data into groups based on one or more columns
- It's typically used with aggregate functions (SUM, AVG, COUNT, MAX, MIN) to perform calculations on each group of data
- It's especially useful for calculating subtoals (i.e., aggregates for different groups of data)

HAVING
- This clause is used to filter records in a result set based on aggregator functions
- It's similar to WHERE but is specifically designed for use with Aggregate functions (SUM, COUNT, AVG, MAX + MIN)

ALIASES

- “AS” keyword 
- Enables columns to be renamed as desired — e.g., 
  
  {
   SELECT
   FirstName AS [Customer First Name]
  }

- Open and Closed quotation marks can be used as well — e.g., AS “X Y Z” 
  If the alias word is one word, no brackets or quotes are needed )

- Single quotes ('...') delimit text - e.g., 
 {
  WHERE 
   Street = 'Elm' 
 }
- This limits street results to ones that only contain "ELM"



OPERATOR TYPES

- Used in conjunction with the WHERE clause 

Used in conjunction with the WHERE clause 

 Arithmetic
  Add	+
  Subtract	-
  Multiply	X
  Divide	/
  Modulo	%

 Comparison
  Equal to	=
  Not equal to	<>
  Greater than	>
  Less than	<
  Greater than or equal to	>=
  Less than or equal to	<=
  Like %

 Logical
  AND
  OR
  IN
  LIKE
  BETWEEN


CASE STATEMENT
 - Creates a new temporary field in the DB serving as a label based on specified conidtions 
 - E.g., 
   {
   total,
   CASE
   WHEN total < 2.00 THEN 'Baseline Purchase'


FUNCTIONS
AGGREGATE - turn a range of #s into a single data point based on mathmetical operations 
- MIN ()
- MAX ()
- AUG ()
- COUNT ()
- SUM ()
STRING
- UPPER () - Converts string of text to uppercase (Opposite = LOWER)
- SUBSTR () - Used to extract a substring from a string (specify starting position + length of the substring to extract)
- INSTR ()
- LTRIM ()
- REPLACE ()
- TRIM ()
DATE
- NOW
- DATETIME ()
- DATE ()
- JULIANDAY ()
- STRFTIME () - Converts date and time strings into another format
- TIME ()



SAMPLE QUERIES - Single tables only 

- RDBMS = DB Browser for SQLite 
- DB: WSDA_Music.db


20 Track names in ASC order plus the price of each track

{
 SELECT 
    t.Name AS "Track Name", 
    t.UnitPrice AS Price 
 FROM 
    Track AS t 
 ORDER BY 
    t.Name 
 LIMIT 20
}


How many customers purchased two songs at $.99 each?

{
 SELECT 
  InvoiceDate,
  BillingAddress,
  BillingCity,
  Total
FROM
  Invoice 
WHERE
  Total = 1.98
ORDER BY
  InvoiceDate
}


How many invoices between $1.98 and $5 exist?

{
 SELECT - * same as 1st example *
 FROM - ** same as 1st example **
 WHERE
  total BETWEEN 1.98 AND 5.00
  ORDER BY - *** same as 1st example ***
}


How many invoices that are exactly $1.98 or $3.96 exist?

{
  SELECT - * same as 1st example *
  FROM - ** same as 1st example **
  WHERE
   total IN (1.98, 3.96)
  ORDER BY - *** same as 1st example ***
}


How many invoices were billed to the city of Brussels?

{
 SELECT - * same as 1st example *
 FROM - ** same as 1st example **
 WHERE
   BillingCity = 'Brussels'
 ORDER BY - *** same as 1st example ***
}


How many invoices were billed to Brussels, Orlando or Paris?

{
 SELECT - * same as 1st example *
 FROM - ** same as 1st example **
 WHERE
   BillingCity IN ('Brussels','Orlando','Paris')
 ORDER BY - *** same as 1st example ***
}


How many invoices were billed to cities that start with the letter 'B'?

% (below) = I don't care (what comes next)

{
 SELECT - * same as 1st example *
 FROM - ** same as 1st example **
 WHERE
   BillingCity LIKE 'B%'
 ORDER BY - *** same as 1st example ***
}


How many invoices were billed to cities that have a letter 'B' in their names?

% (below) = I don't care (what comes before or after)

{
 SELECT - * same as 1st example *
 FROM - ** same as 1st example **
 WHERE
   BillingCity LIKE '%B%'
 ORDER BY - *** same as 1st example ***
}


How many invoices were billed on May 22, 2010?

{
 SELECT - * same as 1st example *
 FROM - ** same as 1st example **
 WHERE
   InvoiceDate = '2010-05-22 00:00:00'
 ORDER BY - *** same as 1st example ***
}

WHERE Clause optimizaton to remove time params:
 DATE(InvoiceDate) = '2010-05-22' 


How many invoies were billed after May 22, 2010 and have a total of less than $3? 

{
 SELECT - * same as 1st example *
 FROM - ** same as 1st example **
 WHERE
   date (InvoiceDate) > '2010-05-22' AND total < 3.00
 ORDER BY - *** same as 1st example ***
}


How many invoies were billed with a city that starts with P or D? 

{
 SELECT - * same as 1st example *
 FROM - ** same as 1st example **
 WHERE
   BillingCity LIKE 'P%' OR BillingCity LIKE 'D%'
 ORDER BY - *** same as 1st example ***
}


How many invoies greater than $1.98were billed with a city that starts with P or D? 

{
 SELECT - * same as 1st example *
 FROM - ** same as 1st example **
 WHERE
   total > 1.98 AND (BillingCity LIKE 'P%' OR BillingCity LIKE 'D%')
 ORDER BY - *** same as 1st example ***
}

BEMDAS / PEMDAS - backets/paranthese, exponents, multiplication, division, addition and subtraction  
- Brackets around clause items) specify that they take precdence / are executed first
- Useful for statements employing AND clauses to capture two or more required items 


How many invoies fell within $.99 and $1.99, $2 and $6.99, $7 and $15 and $15 or more?

{
SELECT 
  InvoiceDate,
  BillingAddress,
  BillingCity,
  Total,
CASE
   WHEN total < 2.00 THEN 'Baseline Purchase'
   WHEN total BETWEEN 2.00 AND 6.99 THEN 'Low Purchase'
   WHEN total BETWEEN 7.00 AND 15.00 THEN 'TargetPurchase'
   ELSE 'Top Performer'
   END AS PurchaseType 
 FROM
  Invoice 
ORDER BY
  BillingCity
}

Comma after "Total" sets up the CASE clause
The three WHEN clauses exclude invoices > $15, so...
ELSE clause is used to capture ivonvoices > $15
END AS clause creaes an alias for the CASE statement clause called "PurhcaseType" in which the THEN definitions/terms are housed
 - e.g., PurchasetType - TopPerformer, TargetPurchase, etc.


Adding a WHERE clause after FROM and before Order BY to filter by the newly-added 'TopPerformer' invoice case category

{
SELECT - * same as last example *
CASE - ** same as last example **
 FROM
  Invoice 
WHERE
   PurchaseType = 'Top Performer'
ORDER BY
  BillingCity
}


QUERY TEST
Provide a report of all 'Budget' (<= 0.99), 'Regular' (> 0.99 and <= 1.49), 'Premium' (> 1.50 and <= 1.99) and 'Exclusive' (>1.99)
- Bucket the pricing category resutls into a 'PriceCategory' column and list them in ascending order by price
- Include the track name and its composer along with the pricing data

{
 SELECT
  Name AS "Track Name", 
  Composer,
  UnitPrice AS Price, 
 CASE
  When UnitPrice <= 0.99 THEN 'Budget'
  When UnitPrice > 0.99 AND UnitPrice <= 1.49 THEN 'Regular'
  When UnitPrice > 1.50 AND UnitPrice <= 1.99 THEN 'Premium'
  Else 'Exclusive'
 END AS PriceCategory 
 FROM
  Track
 ORDER BY
  UnitPrice ASC
}


Q: How would you correctly select a record with a Day entry before Jan. 10, 2016 and an amount above $1K?

A: 
{
 WHERE
  Date(Day) < '2016-01-10' AND Amount > 1000
}



SAMPLE QUERIES - Multiple tables (in which to access tables)


JOINS 
- Command that connects the fields from two or more fields from an Relational Database
- When creating JOINs, it’s essential to… 
  -- Specify the table name followed by the column/field name — e.g., 
     {
      INNER JOIN
       Customer
      ON
       Invoice.CustomerId = Customer.CustomerID 
     }

* Request from Marketing: Full list of customer names alongside the invoices they have generated.*

Task: Creae a Join that connects the Customer and Invoice tables via an inner-join 
 - Note: The Customer table has a one to many relationship to the invoice table 

{
 SELECT
  *
 FROM
  Invoice
 INNER JOIN
  Customer
 ON
  Invoice.CustomerId = Customer.CustomerId
}

- Asterisk returns all columns from the Invoice and (inner-joined) Customer tables 
- ON provides a query with a link between two joined tables 
- Notation TableName(followed).(by)FieldName to specificy which field in which table to join

Simplified version of ^ query (that only returns desired columns and minimizes syntax)...

{
 SELECT
  c.LastName,
  c.FirstName,
  i.InvoiceId,
  i.CustomerId,
  i.InvoiceDate,
  i.total
 FROM
  Invoice AS i
 INNER JOIN
  Customer AS c
 ON
  i.CustomerId = c.CustomerId
 order by c.Customerid
}

- Aliasing (Invoice AS i, Customer AS c) helps reduce the amount of typing

LEFT JOIN query modified from the ^ query

{
 SELECT
  i.InvoiceId,
  c.CustomerId,
  c.Name,
  i.InvoiceDate
  i.BillingAddress
  i.Total
 FROM
  Invoices AS i
 LEFT OUTER JOIN
  Customer AS c
 ON
  i.CustomerId = c.CustomerId
}


Joining Many Tables

Q: Which employees were responsible for the 10-highest individual sales (Customer Service Dept.)? 
   List this out and include the customers each supported.

Need: 
      Employee FN, LN + ID from Employees table
      Customer FN, LN + Support Rep ID from Customers table 
      Customer ID and Total (invoice amount) from Invoces table

{
 SELECT
  e.FirstName,
  e.LastName,
  e.EmployeeId,
  c.FirstName,
  c.LastName,
  c.SupportRepId,
  i.CustomerId,
  i.total
 FROM
  Invoice AS i
  INNER JOIN
   Customer AS c
 ON
  i.CustomerId = c.CustomerId
 INNER JOIN
  Employee AS e
 ON
  c.SupportRepId = e.EmployeeId
 ORDER BY
	i.total DESC
 LIMIT 10 
}


Q: Generate a report that lists each customer along with their assigned support rep.
   Include Customer and Employee First and Last Names and order results by rep's LN, then customer's LN

{
 SELECT
 c.FirstName AS CustomerFirstName,
 c.LastName AS CustomerLastName,
 e.FirstName AS SupportRepFirstName,
 e.LastName AS SupportRepLastName
FROM
 Customer AS c
JOIN
 Employee e ON c.SupportRepID = e.EmployeeId
ORDER BY
 e.LastName, c.LastName;
}


FUNCTIONS
- Aggregate, String, Date and Time

UPPER(X) - returns a copy of input string X in which 
           all lower-case ASCII characters are converted to their upper-case equivalent

STRINGS

Q: Create a mailing list of US customers 

{
 SELECT
  FirstName,
  LastName,
  Address,
  FirstName || ' ' || LastName || ' ' || Address || ',' || City || '' || State || '' || PostalCode AS [Mailing Address]
 length(PostalCode),
 substr(PostalCode,1,5) AS [5 Digit Zip Code])]
 FROM
  Customer
 Where
  Country = 'USA'
}

|| ' ' || Creates a single space between two fields (e.g., FirstName and LastName)
|| ',' || Adds a comma to the end of the first of two field items that have been single spaced 
LENGTH(X) function returns the no. of characters in string value X prior to the first NULL character
SUBSTR(X,Y) returns all characters through the 5th character of the string, beginning with the 1st character


DATE FUNCTIONS

Q: Calculate the ages of all employees

Context: Employee DOBs are formatted as Year/Month/Day
Approach: Use STRFTIME and 1st provide desired date format together with the time string to be formatted 

{
 SELECT
   LastName,
   FirstName,
   BirthDate,
   strftime("%Y-%M-%d",BirthDate) AS [BirthDate No Timecode]
   strftime("%Y-%M-%d",'now') - strftime ("%Y-%M-%d",BirthDate) AS Age
  FROM
   Employee  
}

"%Y-etc. tells the aliased "BirthDate No Timecode" field how to format the DOB - Year, Month, Day
'now' - reads today's date from your computer 
- introduces subtraction of today's date from the BirthDate



AGGREGATE FUNCTIONS

Q: Total global sales life to date

{
 SELECT
   SUM(Total) AS [Total Sales]
 FROM
   Invoice
}

More Aggregate functions
   AVG(Total) AS [Average Sales],
   MAX(Total) AS [Mzximum Sale],
   MIN(Total) AS [Minimum Sale],
   COUNT(*) AS [Sales count]

COUNT - returns count of number of times X is not NULL in a group / i.e, all rows in a given invoice table



NESTING FUNCTION
- Function contain within another function

Ex: 

{
 round(avg(Total),2) AS [Average Sales],
}


Q: Present customers' full name and transforms their postal code into a standardized five-digit format

{
 SELECT
  c.FirstName ||''|| c.LastName AS [Customer Full Name]
  substr(c.PostalCode,1,5) AS [Standardized Postal Code]
 FROM
  Customer c
 WHERE
  c.Country = 'USA'
 ORDER BY
  CustomerFulName;
}

Test Q: Which code produces FROG from ParkFrog in the field text0?
{
 UPPER(substr(text0,5,4))
}

Test Q: How would you calculate the range of data values in the field Total?

1. Divide SUM(Total) by AVG(Total).
2. Add COUNT(Total) to MIN(Total).
3. Subtract MIN(Total) from MAX(Total).

A: The range of data values is the difference between the maximum and minimum values in a dataset
   {
    SELECT MAX(Total) - MIN(Total) AS Range
    FROM table_name;
   }
   So, the A is 3. Subtract MIN(Total) from MAX(Total).



GROUP BY CLAUSE

- Always follows the FROM clause
- Applies to a field that is not aggregated (e.g., BillingCity)

Q: What is the average invoice totals by city?

{
 SELECT
  BillingCity,
  round(avg(total),2)
 FROM
  Invoice
 GROUP BY
  BillingCity
 ORDER BY
  BillingCity
}

Q: What is the average invoice totals by city for only the cities that start with L?

{
 SELECT - * same as last example *
 FROM - ** same as last example **
  Invoice
 WHERE
  BillingCity like "L%"
 Rest *** same as last example ***
}

Q: What is the average invoice totals by city that are greater than $5?

{
 SELECT - * same as first example *
 FROM - ** same as first example **
  Invoice
 GROUP BY 
  Billing City
 HAVING
  avg(total) > 5
 Rest *** same as first example ***
}

HAVING clause always comes after the GROUP BY clause 
HAVING clause is used since avg(total) > 5 is a condition that needs to be applied to an aggregate function (Invoice)

WHERE + HAVING (What info to include from table, then filter the data further)

Q: What is the average invoice totals by cities that start with "B" that are greater than $5?

{
 SELECT
  BillingCity,
  round(avg(total),2)
 FROM
  Invoice
 WHERE
  BillingCity LIKE 'B%'
 GROUP BY
  BillingCity
 HAVING
  avg(total) > 5   
 ORDER BY
  BillingCity
}

WHERE + HAVING together ^ filters by 'B%' BillingCity first, which is required before the resuults can be grouped - 
Invoice > $5 from 'B%' BillingCity

Q: Grouping by more than one field at a time | Average invoice totals by billing country and city?

{
 SELECT
  BillingCity,
  BillingCountry,
  round(avg(total),2)
 FROM
  Invoice
 GROUP BY
  BillingCountry, BillingCity
 ORDER BY
  BillingCountry
}

Test Q: Calculate Customer Ave Spending per City (rounded to 2 decimal places)

{
 SELECT
  BillingCity AS City
  ROUND(AVG(Total), 2) AS AverageSpending
 FROM
  Invoice i
 GROUP BY
  BillingCity  
 ORDER BY
  City ASC;
}

Test Q: Jamal has a large database with internet traffic listed by address, city, county, and state. 
        Why would he group aggregate results by both city and county?

A: To distinguish Hart in Bell county from Hart in Joshua county 
   (if he only grouped by city, there would be one entry for Bell)

Test Q: What is wrong with the following query? 
{
What is wrong with the following query?
 {
  SELECT SubUrb, Round(AVG(HouSiz),1)
  FROM Housing
  GROUP BY SubUrb
  WHERE SubUrb LIKE '%Lake'
 }

A: The WHERE clause should come before the GROUP BY clause. It makes sense to filter results before grouping them. 

