Query writing basics


CONSIDERATIONS

A SQL script can have one ore many queries. Before composing your statements, consider these questions...
- What does your query do?
- What table within the database are you requesting data from? 
- What fields within that table are you interested in? 
- Do you want to exclude any data or filter or omit any range or time period?


CREATING COMMENTS

Best practice: put a comment before any SQL statement you compose
Use plain or natural language to describe each written query 
2 ways to write them…
- Start with two dashes followed by a comment: — THIS IS A COMMENT 
- Create a comment block — /*, return 2 lines down, then */ — whatever goes between there is a comment 
  Format a comment by denoting who created it — e.g., 
   {
    CREATED BY: Your-First-Name Your-Last-Name
    CREATE DATE: MM/DD/YYYY 
    DESCRIPTION: This Is the Structure of a Basic Query 
   }


COMMAND WRITING

Separate commands with commas and a return — e.g.,

{
 SELECT
   FirstName,
   LastName,
   Email

 FROM 
   Customer
}


CLAUSES

FROM clause points in the direction of the data (i.e., which table)

SELECT clause specifies the columns from the table

LIMIT clause restricts the # of rows to the number provided (e.g., LIMIT 10)

ORDER BY clause specifies that a statement returns a result with the rows ordered by the values of one or more columns

 Descending order (A-Z) is the default ORDER BY order
  - ASC can be added to the right of a column item to sort in ascending order 
  - DESC reverses this to descending order (Z-A)

WHERE clause is used to filter results by specifying conditions each row must meet to be included in the result
 - This clause uses Operator Types to specify conditions (see below)


ALIASES

- “AS” keyword 
- Enables columns to be renamed as desired — e.g., 
  
  {
   SELECT
   FirstName AS [Customer First Name]
  }

- Open and Closed quotation marks can be used as well — e.g., AS “X Y Z” 
  If the alias word is one word, no brackets or quotes are needed )


OPERATOR TYPES

- Used in conjunction with the WHERE clause 

Used in conjunction with the WHERE clause 

 Arithmetic
  Add	+
  Subtract	-
  Multiply	X
  Divide	/
  Modulo	%

 Comparison
  Equal to	=
  Not equal to	<>
  Greater than	>
  Less than	<
  Greater than or equal to	>=
  Less than or equal to	<=

 Logical
  AND
  OR
  IN
  LIKE
  BETWEEN


SAMPLE QUERIES 

- RDBMS = DB Browser for SQLite 
- DB: WSDA_Music.db


20 Track names in ASC order plus the price of each track

{
 SELECT 
    t.Name AS "Track Name", 
    t.UnitPrice AS Price 
 FROM 
    Track AS t 
 ORDER BY 
    t.Name 
 LIMIT 20
}


How many customers purchased two songs at $.99 each?

{
 SELECT 
  InvoiceDate,
  BillingAddress,
  BillingCity,
  Total
FROM
  Invoice 
WHERE
  Total = 1.98
ORDER BY
  InvoiceDate
}





