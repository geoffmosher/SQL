Query writing basics


CONSIDERATIONS

A SQL script can have one ore many queries. Before composing your statements, consider these questions...
- What does your query do?
- What table within the database are you requesting data from? 
- What fields within that table are you interested in? 
- Do you want to exclude any data or filter or omit any range or time period?



CREATING COMMENTS

Best practice: put a comment before any SQL statement you compose
Use plain or natural language to describe each written query 
2 ways to write them…
- Start with two dashes followed by a comment: — THIS IS A COMMENT 
- Create a comment block — /*, return 2 lines down, then */ — whatever goes between there is a comment 
  Format a comment by denoting who created it — e.g., 
   {
    CREATED BY: Your-First-Name Your-Last-Name
    CREATE DATE: MM/DD/YYYY 
    DESCRIPTION: This Is the Structure of a Basic Query 
   }



COMMAND WRITING

Separate commands with commas and a return — e.g.,

{
 SELECT
   FirstName,
   LastName,
   Email

 FROM 
   Customer
}



CLAUSES

FROM clause points in the direction of the data (i.e., which table)

SELECT clause specifies the columns from the table

LIMIT clause restricts the # of rows to the number provided (e.g., LIMIT 10)

ORDER BY clause specifies that a statement returns a result with the rows ordered by the values of one or more columns

 Descending order (A-Z) is the default ORDER BY order
  - ASC can be added to the right of a column item to sort in ascending order 
  - DESC reverses this to descending order (Z-A)

WHERE clause is used to filter results by specifying conditions each row must meet to be included in the result
 - This clause uses Operator Types to specify conditions (see below)
 - It can also introduce conditions involving fields 
 - It comes after the FROM clause and before the GROUP BY and ORDER BY clauses
 - Can't be used to create a condition based on an aggregate function

CASE clause impliments conditional logic within a statement, acting like an "if-then" parameter

ELSE clause is used to capture items outside previously specified cateogires (e.g., defined dollar amounts)
 - In other words, it specifies a catch-all outcome following IF-THEN logic

END AS clause creaes an alias for the CASE statement clause called "PurhcaseType"

JOIN
 - This clause combinea rows from two or more tables, based on a related column between them 

ON (useful with JOIN)
 - Provides a query with a link between two joined tables 

INNER JOIN
 - Used to combine rows from two or more tables where there are matching values in a specified column across the tables
 - Retrieves only the rows that have corresponding data in both tables based on a common field between them
 - Most common type of JOIN; used to retrieve related data from multiple tables where there's a clear connection btw them 
 - Only reutrns matching records (any unmatched data from the specified talbes is ignored)

LEFT JOIN (depends on order listed in a statement)
 - Combines all records from the Left table with matching records from the Right table 

Right JOIN (depends on order listed in a statement)
 - Combines all records from the Right table with matching records from the LEFT table 
 - SQLite does not support Right Outer Joins 

GROUP BY 
- This clause is used to organize data into groups based on one or more columns
- It's typically used with aggregate functions (SUM, AVG, COUNT, MAX, MIN) to perform calculations on each group of data
- It's especially useful for calculating subtoals (i.e., aggregates for different groups of data)

HAVING
- This clause is used to filter records in a result set based on aggregator functions
- It's similar to WHERE but is specifically designed for use with Aggregate functions (SUM, COUNT, AVG, MAX + MIN)

DISTINCT
- This clause is used to remove duplicate rows from the result set of a query to ensure only unique rows are returned
- It operates on all columns specified in the SELECT statement

ALIASES

- “AS” keyword 
- Enables columns to be renamed as desired — e.g., 
  
  {
   SELECT
   FirstName AS [Customer First Name]
  }

- Open and Closed quotation marks can be used as well — e.g., AS “X Y Z” 
  If the alias word is one word, no brackets or quotes are needed )

- Single quotes ('...') delimit text - e.g., 
 {
  WHERE 
   Street = 'Elm' 
 }
- This limits street results to ones that only contain "ELM"



OPERATOR TYPES

- Used in conjunction with the WHERE clause 

Used in conjunction with the WHERE clause 

 Arithmetic
  Add	+
  Subtract	-
  Multiply	X
  Divide	/
  Modulo	%

 Comparison
  Equal to	=
  Not equal to	<>
  Greater than	>
  Less than	<
  Greater than or equal to	>=
  Less than or equal to	<=
  Like %

 Logical
  AND
  OR
  IN
  LIKE
  BETWEEN


CASE STATEMENT
 - Creates a new temporary field in the DB serving as a label based on specified conidtions 
 - E.g., 
   {
   total,
   CASE
   WHEN total < 2.00 THEN 'Baseline Purchase'


FUNCTIONS
AGGREGATE - turn a range of #s into a single data point based on mathmetical operations 
- MIN ()
- MAX ()
- AUG ()
- COUNT ()
- SUM ()
STRING
- UPPER () - Converts string of text to uppercase (Opposite = LOWER)
- SUBSTR () - Used to extract a substring from a string (specify starting position + length of the substring to extract)
- INSTR ()
- LTRIM ()
- REPLACE ()
- TRIM ()
DATE
- NOW
- DATETIME ()
- DATE ()
- JULIANDAY ()
- STRFTIME () - Converts date and time strings into another format
- TIME ()


DATA MANIPULATION LANGUAGE (DML) 
- INSERT = Adds data
- UPDATE = Changes data
- DELETE = Removes data




QUERY STRUCTURE 

The typical SQL query structure is:

{
 SELECT columns
 FROM table
 WHERE condition
 GROUP BY column
 HAVING condition
 ORDER BY column;
}



SAMPLE QUERIES - Single tables only 

- RDBMS = DB Browser for SQLite 
- DB: WSDA_Music.db


20 Track names in ASC order plus the price of each track

{
 SELECT 
    t.Name AS "Track Name", 
    t.UnitPrice AS Price 
 FROM 
    Track AS t 
 ORDER BY 
    t.Name 
 LIMIT 20
}


How many customers purchased two songs at $.99 each?

{
 SELECT 
  InvoiceDate,
  BillingAddress,
  BillingCity,
  Total
FROM
  Invoice 
WHERE
  Total = 1.98
ORDER BY
  InvoiceDate
}


How many invoices between $1.98 and $5 exist?

{
 SELECT - * same as 1st example *
 FROM - ** same as 1st example **
 WHERE
  total BETWEEN 1.98 AND 5.00
  ORDER BY - *** same as 1st example ***
}


How many invoices that are exactly $1.98 or $3.96 exist?

{
  SELECT - * same as 1st example *
  FROM - ** same as 1st example **
  WHERE
   total IN (1.98, 3.96)
  ORDER BY - *** same as 1st example ***
}


How many invoices were billed to the city of Brussels?

{
 SELECT - * same as 1st example *
 FROM - ** same as 1st example **
 WHERE
   BillingCity = 'Brussels'
 ORDER BY - *** same as 1st example ***
}


How many invoices were billed to Brussels, Orlando or Paris?

{
 SELECT - * same as 1st example *
 FROM - ** same as 1st example **
 WHERE
   BillingCity IN ('Brussels','Orlando','Paris')
 ORDER BY - *** same as 1st example ***
}


How many invoices were billed to cities that start with the letter 'B'?

% (below) = I don't care (what comes next)

{
 SELECT - * same as 1st example *
 FROM - ** same as 1st example **
 WHERE
   BillingCity LIKE 'B%'
 ORDER BY - *** same as 1st example ***
}


How many invoices were billed to cities that have a letter 'B' in their names?

% (below) = I don't care (what comes before or after)

{
 SELECT - * same as 1st example *
 FROM - ** same as 1st example **
 WHERE
   BillingCity LIKE '%B%'
 ORDER BY - *** same as 1st example ***
}


How many invoices were billed on May 22, 2010?

{
 SELECT - * same as 1st example *
 FROM - ** same as 1st example **
 WHERE
   InvoiceDate = '2010-05-22 00:00:00'
 ORDER BY - *** same as 1st example ***
}

WHERE Clause optimizaton to remove time params:
 DATE(InvoiceDate) = '2010-05-22' 


How many invoies were billed after May 22, 2010 and have a total of less than $3? 

{
 SELECT - * same as 1st example *
 FROM - ** same as 1st example **
 WHERE
   date (InvoiceDate) > '2010-05-22' AND total < 3.00
 ORDER BY - *** same as 1st example ***
}


How many invoies were billed with a city that starts with P or D? 

{
 SELECT - * same as 1st example *
 FROM - ** same as 1st example **
 WHERE
   BillingCity LIKE 'P%' OR BillingCity LIKE 'D%'
 ORDER BY - *** same as 1st example ***
}


How many invoies greater than $1.98were billed with a city that starts with P or D? 

{
 SELECT - * same as 1st example *
 FROM - ** same as 1st example **
 WHERE
   total > 1.98 AND (BillingCity LIKE 'P%' OR BillingCity LIKE 'D%')
 ORDER BY - *** same as 1st example ***
}

BEMDAS / PEMDAS - backets/paranthese, exponents, multiplication, division, addition and subtraction  
- Brackets around clause items) specify that they take precdence / are executed first
- Useful for statements employing AND clauses to capture two or more required items 


How many invoies fell within $.99 and $1.99, $2 and $6.99, $7 and $15 and $15 or more?

{
SELECT 
  InvoiceDate,
  BillingAddress,
  BillingCity,
  Total,
CASE
   WHEN total < 2.00 THEN 'Baseline Purchase'
   WHEN total BETWEEN 2.00 AND 6.99 THEN 'Low Purchase'
   WHEN total BETWEEN 7.00 AND 15.00 THEN 'TargetPurchase'
   ELSE 'Top Performer'
   END AS PurchaseType 
 FROM
  Invoice 
ORDER BY
  BillingCity
}

Comma after "Total" sets up the CASE clause
The three WHEN clauses exclude invoices > $15, so...
ELSE clause is used to capture ivonvoices > $15
END AS clause creaes an alias for the CASE statement clause called "PurhcaseType" in which the THEN definitions/terms are housed
 - e.g., PurchasetType - TopPerformer, TargetPurchase, etc.


Adding a WHERE clause after FROM and before Order BY to filter by the newly-added 'TopPerformer' invoice case category

{
SELECT - * same as last example *
CASE - ** same as last example **
 FROM
  Invoice 
WHERE
   PurchaseType = 'Top Performer'
ORDER BY
  BillingCity
}


QUERY TEST
Provide a report of all 'Budget' (<= 0.99), 'Regular' (> 0.99 and <= 1.49), 'Premium' (> 1.50 and <= 1.99) and 'Exclusive' (>1.99)
- Bucket the pricing category resutls into a 'PriceCategory' column and list them in ascending order by price
- Include the track name and its composer along with the pricing data

{
 SELECT
  Name AS "Track Name", 
  Composer,
  UnitPrice AS Price, 
 CASE
  When UnitPrice <= 0.99 THEN 'Budget'
  When UnitPrice > 0.99 AND UnitPrice <= 1.49 THEN 'Regular'
  When UnitPrice > 1.50 AND UnitPrice <= 1.99 THEN 'Premium'
  Else 'Exclusive'
 END AS PriceCategory 
 FROM
  Track
 ORDER BY
  UnitPrice ASC
}


Q: How would you correctly select a record with a Day entry before Jan. 10, 2016 and an amount above $1K?

A: 
{
 WHERE
  Date(Day) < '2016-01-10' AND Amount > 1000
}



SAMPLE QUERIES - Multiple tables (in which to access tables)


JOINS 
- Command that connects the fields from two or more fields from an Relational Database
- When creating JOINs, it’s essential to… 
  -- Specify the table name followed by the column/field name — e.g., 
     {
      INNER JOIN
       Customer
      ON
       Invoice.CustomerId = Customer.CustomerID 
     }

* Request from Marketing: Full list of customer names alongside the invoices they have generated.*

Task: Creae a Join that connects the Customer and Invoice tables via an inner-join 
 - Note: The Customer table has a one to many relationship to the invoice table 

{
 SELECT
  *
 FROM
  Invoice
 INNER JOIN
  Customer
 ON
  Invoice.CustomerId = Customer.CustomerId
}

- Asterisk returns all columns from the Invoice and (inner-joined) Customer tables 
- ON provides a query with a link between two joined tables 
- Notation TableName(followed).(by)FieldName to specificy which field in which table to join

Simplified version of ^ query (that only returns desired columns and minimizes syntax)...

{
 SELECT
  c.LastName,
  c.FirstName,
  i.InvoiceId,
  i.CustomerId,
  i.InvoiceDate,
  i.total
 FROM
  Invoice AS i
 INNER JOIN
  Customer AS c
 ON
  i.CustomerId = c.CustomerId
 order by c.Customerid
}

- Aliasing (Invoice AS i, Customer AS c) helps reduce the amount of typing

LEFT JOIN query modified from the ^ query

{
 SELECT
  i.InvoiceId,
  c.CustomerId,
  c.Name,
  i.InvoiceDate
  i.BillingAddress
  i.Total
 FROM
  Invoices AS i
 LEFT OUTER JOIN
  Customer AS c
 ON
  i.CustomerId = c.CustomerId
}


Joining Many Tables

Q: Which employees were responsible for the 10-highest individual sales (Customer Service Dept.)? 
   List this out and include the customers each supported.

Need: 
      Employee FN, LN + ID from Employees table
      Customer FN, LN + Support Rep ID from Customers table 
      Customer ID and Total (invoice amount) from Invoces table

{
 SELECT
  e.FirstName,
  e.LastName,
  e.EmployeeId,
  c.FirstName,
  c.LastName,
  c.SupportRepId,
  i.CustomerId,
  i.total
 FROM
  Invoice AS i
  INNER JOIN
   Customer AS c
 ON
  i.CustomerId = c.CustomerId
 INNER JOIN
  Employee AS e
 ON
  c.SupportRepId = e.EmployeeId
 ORDER BY
	i.total DESC
 LIMIT 10 
}


Q: Generate a report that lists each customer along with their assigned support rep.
   Include Customer and Employee First and Last Names and order results by rep's LN, then customer's LN

{
 SELECT
 c.FirstName AS CustomerFirstName,
 c.LastName AS CustomerLastName,
 e.FirstName AS SupportRepFirstName,
 e.LastName AS SupportRepLastName
FROM
 Customer AS c
JOIN
 Employee e ON c.SupportRepID = e.EmployeeId
ORDER BY
 e.LastName, c.LastName;
}


FUNCTIONS
- Aggregate, String, Date and Time

UPPER(X) - returns a copy of input string X in which 
           all lower-case ASCII characters are converted to their upper-case equivalent

STRINGS

Q: Create a mailing list of US customers 

{
 SELECT
  FirstName,
  LastName,
  Address,
  FirstName || ' ' || LastName || ' ' || Address || ',' || City || '' || State || '' || PostalCode AS [Mailing Address]
 length(PostalCode),
 substr(PostalCode,1,5) AS [5 Digit Zip Code])]
 FROM
  Customer
 Where
  Country = 'USA'
}

|| ' ' || Creates a single space between two fields (e.g., FirstName and LastName)
|| ',' || Adds a comma to the end of the first of two field items that have been single spaced 
LENGTH(X) function returns the no. of characters in string value X prior to the first NULL character
SUBSTR(X,Y) returns all characters through the 5th character of the string, beginning with the 1st character


DATE FUNCTIONS

Q: Calculate the ages of all employees

Context: Employee DOBs are formatted as Year/Month/Day
Approach: Use STRFTIME and 1st provide desired date format together with the time string to be formatted 

{
 SELECT
   LastName,
   FirstName,
   BirthDate,
   strftime("%Y-%M-%d",BirthDate) AS [BirthDate No Timecode]
   strftime("%Y-%M-%d",'now') - strftime ("%Y-%M-%d",BirthDate) AS Age
  FROM
   Employee  
}

"%Y-etc. tells the aliased "BirthDate No Timecode" field how to format the DOB - Year, Month, Day
'now' - reads today's date from your computer 
- introduces subtraction of today's date from the BirthDate



AGGREGATE FUNCTIONS

Q: Total global sales life to date

{
 SELECT
   SUM(Total) AS [Total Sales]
 FROM
   Invoice
}

More Aggregate functions
   AVG(Total) AS [Average Sales],
   MAX(Total) AS [Mzximum Sale],
   MIN(Total) AS [Minimum Sale],
   COUNT(*) AS [Sales count]

COUNT - returns count of number of times X is not NULL in a group / i.e, all rows in a given invoice table



NESTING FUNCTION
- Function contain within another function

Ex: 

{
 round(avg(Total),2) AS [Average Sales],
}


Q: Present customers' full name and transforms their postal code into a standardized five-digit format

{
 SELECT
  c.FirstName ||''|| c.LastName AS [Customer Full Name]
  substr(c.PostalCode,1,5) AS [Standardized Postal Code]
 FROM
  Customer c
 WHERE
  c.Country = 'USA'
 ORDER BY
  CustomerFulName;
}

Test Q: Which code produces FROG from ParkFrog in the field text0?
{
 UPPER(substr(text0,5,4))
}

Test Q: How would you calculate the range of data values in the field Total?

1. Divide SUM(Total) by AVG(Total).
2. Add COUNT(Total) to MIN(Total).
3. Subtract MIN(Total) from MAX(Total).

A: The range of data values is the difference between the maximum and minimum values in a dataset
   {
    SELECT MAX(Total) - MIN(Total) AS Range
    FROM table_name;
   }
   So, the A is 3. Subtract MIN(Total) from MAX(Total).



GROUP BY CLAUSE

- Always follows the FROM clause
- Applies to a field that is not aggregated (e.g., BillingCity)

Q: What is the average invoice totals by city?

{
 SELECT
  BillingCity,
  round(avg(total),2)
 FROM
  Invoice
 GROUP BY
  BillingCity
 ORDER BY
  BillingCity
}

Q: What is the average invoice totals by city for only the cities that start with L?

{
 SELECT - * same as last example *
 FROM - ** same as last example **
  Invoice
 WHERE
  BillingCity like "L%"
 Rest *** same as last example ***
}

Q: What is the average invoice totals by city that are greater than $5?

{
 SELECT - * same as first example *
 FROM - ** same as first example **
  Invoice
 GROUP BY 
  Billing City
 HAVING
  avg(total) > 5
 Rest *** same as first example ***
}

HAVING clause always comes after the GROUP BY clause 
HAVING clause is used since avg(total) > 5 is a condition that needs to be applied to an aggregate function (Invoice)

WHERE + HAVING (What info to include from table, then filter the data further)

Q: What is the average invoice totals by cities that start with "B" that are greater than $5?

{
 SELECT
  BillingCity,
  round(avg(total),2)
 FROM
  Invoice
 WHERE
  BillingCity LIKE 'B%'
 GROUP BY
  BillingCity
 HAVING
  avg(total) > 5   
 ORDER BY
  BillingCity
}

WHERE + HAVING together ^ filters by 'B%' BillingCity first, which is required before the resuults can be grouped - 
Invoice > $5 from 'B%' BillingCity

Q: Grouping by more than one field at a time | Average invoice totals by billing country and city?

{
 SELECT
  BillingCity,
  BillingCountry,
  round(avg(total),2)
 FROM
  Invoice
 GROUP BY
  BillingCountry, BillingCity
 ORDER BY
  BillingCountry
}

Test Q: Calculate Customer Ave Spending per City (rounded to 2 decimal places)

{
 SELECT
  BillingCity AS City
  ROUND(AVG(Total), 2) AS AverageSpending
 FROM
  Invoice i
 GROUP BY
  BillingCity  
 ORDER BY
  City ASC;
}

Test Q: Jamal has a large database with internet traffic listed by address, city, county, and state. 
        Why would he group aggregate results by both city and county?

A: To distinguish Hart in Bell county from Hart in Joshua county 
   (if he only grouped by city, there would be one entry for Bell)

Test Q: What is wrong with the following query? 
{
What is wrong with the following query?
 {
  SELECT SubUrb, Round(AVG(HouSiz),1)
  FROM Housing
  GROUP BY SubUrb
  WHERE SubUrb LIKE '%Lake'
 }

A: The WHERE clause should come before the GROUP BY clause. It makes sense to filter results before grouping them. 


NESTED/SUB QUERIES
- Ideal for displaying two field items against one another (e.g., sales by city versus aggregate average sales)

Q: Gather data about all invoices less than the average invoice

{
  SELECT
  InvoiceDate,
  BillingAddress,
  BillingCity,
  total
 FROM
  Invoice
WHERE
  total <
   (SELECT avg(total)FROM Invoice)
 ORDER BY
  total DESC
}

Subquery, (SELECT avg(total)FROM Invoice), calculates the ave invoice amount 
Filtered by the Where clause to limit results to invoices < the average 

Elements: 
 - Outer Query: SELECT clause to Where Total < portion of the WHERE clause
 - Inner Query: portion of the WHERE clause contained within the parentheses 
 - Outer Query (cont'd): ORDER BY clause 


Q: How is each individual city performing against the global average sales?

}
 SELECT
  BillingCity,
  AVG(total) AS [City Average], 
  (SELECT avg(total) FROM Invoice) AS [Global Average]
 FROM
  Invoice
 GROUP BY
  BillingCity
 ORDER BY
  BillingCity
}

Subquery, (SELECT avg(total) FROM Invoice), calcualtes the global average from all Invoice columns in the Invoice table
GROUP BY and ORDER BY Billing City clauses ensure city-level averages appear in ASC order alongside the global average


Q: All invoices that occured after a specific date

{
 SELECT
  InvoiceDate,
  BillingAddress,
  BillingCity
 FROM
  Invoice
 WHERE
  InvoiceDate > 
  (SELECT
   InvoiceDate
   FROM
   Invoice 
   WHERE
   InvoiceId = 251) 
}

Subquery wrapped in a pair of parentheses with an outer query around it


SUBQUERIES WITH DISTINCT CLAUSES

Q: Which tracks are not selling?

{
 SELECT
  TrackId,
  Composer,
  Name
 FROM
  Track 
 WHERE
  TrackId 
 NOT IN
  (SELECT
   DISTINCT
   TrackId
  FROM
   InvoiceLine
  ORDER BY
   TrackID)
}

TEST Q: Compile a list of tracks (by Track ID + Track Name) that have never sold, along with their composer and genre

SELECT
  t.TrackId AS "Track ID",
  t.Name AS "Track Name",
  t.Composer,
  g.Name AS Genre
 FROM
  Track t
  JOIN Genre g ON t.GenreID = g.GenreID
 WHERE
  t.TrackId NOT IN
  (SELECT
   InvoiceLine.TrackID
   TrackId
  FROM
   InvoiceLine
  ORDER BY
   "Track Name" ASC)


Test Q: What is wrong with the following WHERE clause?
 {
  WHERE dist  >  AVG(dist) from Loc
 }
A: The subquery should be enclosed in parentheses and begin with SELECT. 
   The syntax for a subclause follows the same rules as a regular clause.

Test Q: What does the following WHERE clause accomplish?
 {
  WHERE ConcertCity IN
   (SELECT ConcertCity
    FROM Concerts
    WHERE ConcertCntry IN ('US', 'UK', 'DE')
 }
A: The subquery returns all concert cities in the US, UK, or DE (i.e., limites ConcertCity to those countries)



VIEWS
- Helps save time during complext queries 

{
 CREATE VIEW V_Avg Total AS
 SELECT
  round(avg(total).2) AS [Average Total]
 FROM
  Invoice
}

Best practice: "V_" to name Views
R Click in SQLLite to browse, modify and delete created views; and export

"DROP VIEW" = Delete View 
- Do this first, and then modify it
{
 DROP VIEW
  V_(ViewName) <- it should auto-populate via IntelliSense 
}

VIEWS AND JOINS

Below statement creates a view called "V_Tracks_InvoiceLine"

{
 CREATE VIEW V_Tracks_InvoiceLine AS
 SELECT
  il.InvoiceId,
  il.UnitPrice,
  il.Quantity,
  t.Name,
  t.Composer,
  t.Milliseconds
 FROM
   InvoiceLine il
 INNER JOIN
   Track T
 ON
   il.TrackId = t.TrackId
}

- SELECT clause defines what data to include in the view.
- FROM and INNER JOIN clauses combine data from the InvoiceLine and Track tables based on the matching TrackId value
- ON clause specifies the JOIN condition, ensuring the view includes only rows where TrackId exists in both tables



DATA MANIPULATION LANGUAGE (DML) 

INSERT = Add records
Update = Change records
 - Used with the WHERE clause 
Delete = Remove records
 - Also used with the WHERE clause 


Q: Can you add a list of artists into the Artists table in the DB?

{
 INSERT INTO 
   Artist (Name)
 VALUES ('Bob Marley')
}

Updating an ArtistID to update an Artist's name

{
 UPDATE
   Artist
 SET Name = "Damien Marley"   
 WHERE
   ArtistId = 276
}

Q: DELETE the artist just added ^

{
 DELETE FROM
   Artist
 WHERE
   ArtistId = 276
}

TEST Q: To which field does the following code add data?

{
 INSERT INTO
   Congo (Alpha)
 VALUES (4267)
}

A: Alpha, which is a field in the table "Congo"


EXAM Qs
1. What does the GROUP BY clause do?
A: Allows you to group data.

2. Which query returns the average household size by ZIP code?
{
 SELECT
  Zip,
  Round(AVG(HouSiz),1)
 FROM
  Housing
 GROUP BY
  HouSiz

 SELECT
  HouSiz,
  Round(AVG(HouSiz),1)
 FROM
  Housing
 GROUP BY
  Zip

 SELECT
  Zip,
  Round(AVG(HouSiz),1)
 FROM
  Housing
 GROUP BY
  Zip

 SELECT
  Zip,
  Round(AVG(Zip),1)
 FROM
  Housing
 GROUP BY
  Zip 
}
A: SELECT Zip, Round(AVG(HouSiz),1) FROM Housing GROUP BY Zip

3. Where does the HAVING clause appear?
- after the ORDER BY clause
- before the SELECT clause
- after the GROUP BY clause
A: after the GROUP BY clause
   - HAVING clause is used to filter groups of data created by the GROUP BY clause. 
   - It applies conditions to the grouped data, much like the WHERE clause does for individual rows.

4. Which tab should you use to import an existing database into DB Browser?
New Database
Access Open
Open Project
Open Database
A: Open Database

5. Why should you use a HAVING clause instead of a WHERE clause?
to make the query more readable
to order results by size
to filter based on an aggregate result
to filter based on results of nested functions
A: to filter based on an aggregate result
   - HAVING clause is specifically used to filter groups of data after aggregation, such as using functions - e.g., 
     SUM(), COUNT(), AVG(), etc.
   - The WHERE clause, on the other hand, is used to filter rows before any grouping or aggregation happens.

6. What is wrong with the following query?
{
 SELECT SubUrb, Round(AVG(HouSiz),1)
 FROM Housing
 WHERE SubUrb LIKE '%Lake'
 HAVING Round(AVG(HouSiz),1) > 3
 GROUP BY SubUrb
}
The WHERE clause should occur after the HAVING clause.
The HAVING clause should occur after the GROUP BY clause.
The GROUP BY clause should occur first.
A: "The HAVING clause should occur after the GROUP BY clause."
   - HAVING clause must come after the GROUP BY clause because it operates on the grouped data
   - Corrected query should is...
{
 SELECT 
   SubUrb, Round(AVG(HouSiz),1)
 FROM 
   Housing
 WHERE 
   SubUrb LIKE '%Lake'
 GROUP BY 
   SubUrb
 HAVING 
   Round(AVG(HouSiz),1) > 3;
}

7. What is a subquery?
one query nested inside of another
a reserved keyword used for queries
a special query used for reserved databases
a subset of all other queries in a database
A: one query nested inside of another

8. What are the components of a subquery?
Inner Query and Outer Query
Upper and Lower Query
Mid Query and Select Query
Outer and Between Queries
A: Inner Query and Outer Query

9. Why should you place clauses and fields on separate lines?
to make it easier for humans to read
to comply with syntax requirements
to permit multiple fields and clauses
to have faster execution
A: to make it easier for humans to read

10. Which clause correctly specifies aliases?
SELECT 
   Street AS "Road", 
   ZIP AS "Zip Code"
SELECT
   Street AS Road
   ZIP AS [Zip Code]
SELECT
   Street ALIAS (Road),
   ZIP ALIAS (Zip Code)
SELECT
   Street AS [Road],
   ZIP AS [Zip Code]
A: SELECT Street AS [Road], ZIP AS [Zip Code]

11. What distinguishes an aggregate subquery from a non-aggregate subquery?
the inclusion of more than one FROM clause
the degree of nesting
the comparisons of quantities
the use of functions such as AVG or MAX
A: "the use of functions such as AVG or MAX."
   - An aggregate subquery includes the use of aggregate functions like AVG(), MAX(), SUM(), MIN(), or COUNT()
   - The functions calculate a single result (average, maximum, total) for a group of data and...
     return that value to the outer query.
   - In contrast, a non-aggregate subquery does not include the functions; it returns individual rows or values

12. Using the Execute SQL tab, compose the SQL query that answers the following question: 
    How many Customer LastNames start with G?
A: The database contains a table named Customer, not Customers. ​​This can be revised. 
   The number of customer last names that start with "G" is 7.
{
SELECT COUNT(*)
FROM Customer
WHERE LastName LIKE 'G%';
}

13. In the Execute SQL tab of DB Browser for SQLite...
    which track appears at the top of the Track table when sorted in descending order?
A: The track that appears at the top of the Track table when sorted in descending order is "zero tolerance".
{
 SELECT Name
 FROM Track
 ORDER BY Name DESC
 LIMIT 1;
}

14. Skipped. No way to get any of the possible answers when running the correct statement.

15. Why would you use DISTINCT in a clause?
to eliminate duplication
to extend a list
to modify NOT IN
A: to eliminate duplication
   - The DISTINCT keyword ensures the results of a query contain only unique values, effectively removing dupes
   - e.g., 
     {
      SELECT DISTINCT 
       City
      FROM 
       Customers;
   - This query retrieves a list of unique cities from the Customers table, eliminating any dupes in the City column


16. What is a view?
Select an answer:
a view mode to examine the database
an SQL browser used to view databases
a system query you can execute
a query that can be saved and executed repeatedly
A: a query that can be saved and executed repeatedly

17. In the Execute SQL tab of DB Browser for SQLite, how many invoices were billed to the city of Brussels?
6
17
2
7
A: 7
{
 SELECT COUNT(*)
 FROM Invoice
 WHERE BillingCity = 'Brussels';
}

18. What is the correct syntax to create a view called V_Composers?
CREATE NEW VIEW V_Composers AS
V_Composers CREATE VIEW AS
MAKE VIEW V_Composers AS
CREATE VIEW V_Composers AS
A: CREATE VIEW V_Composers AS

19. What is the fundamental building block of an SQL statement?
a table
a clause
a field
a phrase
A: a clause
  { 
   SELECT Name, Age      -- SELECT clause
   FROM Users            -- FROM clause
   WHERE Age > 18;       -- WHERE clause
  }

20. What is the purpose of DB Browser?
discovering relationships between records
creating and editing databases
entering queries
adding column headings and row numbers
A: creating and editing databases

21. What is another name for a view?
a temporary table
a mapping table
a system table
a virtual table
A: a virtual table

22. After you have created and run a view, how can you most easily see the results?
Use the Browse Data tab.
Open the external table with a spreadsheet.
Check the results pane in the SQL tab.
Use the Database Structure tab.
A: Use the Browse Data tab.

23. Which clause selects only Oak out of the streets Hickory, Elm, Poplar, Oak, and Palm?
WHERE
   Street  LIKE '%k%'
WHERE
   Street  LIKE 'k%'
WHERE
   Street  LIKE '%k'
A: WHERE Street LIKE '%k'
   - The LIKE clause with the % wildcard is used to match patterns in strings:
     % represents any number of characters (including none)
     _ represents a single character
   In this case:
    '%k': Matches any string that ends with 'k'
     This would select Oak because it ends with 'k'

24. What is missing from the following query?
{
 CREATE VIEW V_JOIN_T 
  SELECT a.ID, a.Num, a.Prc, b.Auth, b.Date
 FROM  Prod a
 INNER JOIN Comb b
 ON a.Name = b.Title
}
AS
TO
SAVE
VIEWNAME
A: AS
   The AS keyword is required to define the query that will populate the view. The corrected query would look like this:
{
 CREATE VIEW V_JOIN_T AS
 SELECT a.ID, a.Num, a.Prc, b.Auth, b.Date
 FROM Prod a
 INNER JOIN Comb b
}

25. Which record value satisfies the criteria for fields named V1, V2, and V3?
WHERE
V1 > 8 AND V2  = 7  OR V3  = 2
Possible Answers:
V1  V2  V3
 5     7     3
V1  V2  V3
 9     8     1
V1  V2  V3
 5     8     2
V1  V2  V3
 5     2     3
A: Record 3...V1 = 5, V2 = 8, V3 = 2 satisfies the criteria (it has a 2 value for V3)

26. What is the correct syntax for the CASE statement?
SELECT
        FirstName,
        LastName,
        Company,
        Country,
        START CASE        
                WHEN Country = 'USA' THEN 'Local' 
                ELSE 'Global' 
        END AS Region
FROM        
        Customer
ORDER BY
        Region

SELECT
        FirstName,
        LastName,
        Company,
        Country,
        CASE        
                WHEN Country = 'USA' THEN 'Local' 
                ELSE 'Global' 
        END CASE AS Region
FROM        
        Customer
ORDER BY
        Region

SELECT
        FirstName,
        LastName,
        Company,
        Country,
        CASE ONE        
                WHEN Country = 'USA' THEN 'Local' 
                ELSE 'Global' 
        END AS Region
FROM        
        Customer
ORDER BY
        Region

SELECT
        FirstName,
        LastName,
        Company,
        Country,
        CASE        
                WHEN Country = 'USA' THEN 'Local' 
                ELSE 'Global' 
        END AS Region
FROM        
        Customer
ORDER BY
        Region

A: SELECT FirstName, LastName, Company, Country, CASE
WHEN Country = 'USA' THEN 'Local' ELSE 'Global' END AS Region FROM
Customer ORDER BY Region


27. What does DML stand for?
A: Data Manipulation Language

28. What is the correct syntax to add the artist 'Peter Tosh' to the artist table?
INSERT INTO Artist (Name) VALUES ('Peter Tosh')
INSERT TO Artist (Name) VALUES ('Peter Tosh')
ADD INTO Artist (Name) VALUES ('Peter Tosh')
INSERT Artist (Name) VALUES ('Peter Tosh')
A: INSERT INTO Artist (Name) VALUES ('Peter Tosh')
   - The correct syntax for inserting a new row into a table in SQL is:
   - INSERT INTO TableName (ColumnName1, ColumnName2, ...)
   - VALUES (Value1, Value2, ...);
   - INSERT INTO is the correct keyword for adding data to a table.
   - Artist (Name) specifies the table (Artist) and the column (Name) where the value will be inserted.
   - VALUES ('Peter Tosh') provides the value to be inserted into the specified column.

29. Which statement best describes an Inner Join?
It returns only matching records from two or more tables.
It returns both matching records and records that are unmatched.
It joins to multiple databases.
It returns only unmatched records.
A: It returns only matching records from two or more tables.
   - An Inner Join in SQL combines rows from two or more tables based on a related column and returns only the rows where there is a match in all tables involved in the join.
     {
      SELECT Customers.CustomerName, Orders.OrderID
      FROM Customers
      INNER JOIN Orders
      ON Customers.CustomerID = Orders.CustomerID;
     }

30. Why would you use WHERE in conjunction with UPDATE?
to specify or limit rows
to combine rows
to join columns or fields
to rename fields
A: to specify or limit rows

31. What DML command removes data?
EDIT
ADD
DELETE
MAP
A: DELETE

32. Which statement best describes a Left Outer Join?
It does not return any records at all.
It returns all records from both the left and right tables with any matching records from the right table.
It returns all records from the left table with any matching records from the right table.
It returns all records on the right table.
A: "It returns all records from the left table with any matching records from the right table."
   - i.e., All rows from the left table, regardless of whether they have matching rows in the right table
   - If there is no match, the result will include NULL values for the columns from the right table
   {
    SELECT Customers.CustomerName, Orders.OrderID
    FROM Customers
    LEFT JOIN Orders
    ON Customers.CustomerID = Orders.CustomerID;
   }

33. Which table is completely reproduced in the output of the following query?
SELECT
   p.name
   c.total
FROM Peabody AS p
LEFT OUTER JOIN Carmichael AS c
ON p.tempID = c.tempID
Possible answers:
tempID
c
Peabody
Carmichael
A: "Peabody"
In a Left Outer Join, all rows from the left table (Peabody in this case) are included in the output, regardless of whether there is a matching row in the right table (Carmichael).
If there is no match for a row in Peabody, the corresponding columns from Carmichael will contain NULL values.
{
SELECT
   p.name,
   c.total
FROM Peabody AS p
LEFT OUTER JOIN Carmichael AS c
ON p.tempID = c.tempID;
Left Table: Peabody (aliased as p).
Right Table: Carmichael (aliased as c).
Output: All rows from Peabody, and only matching rows from Carmichael.
}

34. Using the Browse Data tab or the Entity Relationship Diagram (ERD) for the database; take a look at the tracks table. Identify which fields in this table are foreign keys of another table.
Milliseconds, Composer, and TrackId
AlbumId, MediaTypeId, and GenreId
Employee, Invoice, and Album
UnitPrice, Composer, and TrackId
A: "AlbumId, MediaTypeId, and GenreId" are the foreign keys of another table in the Track table. ​
   - Based on the schema and foreign key relationships of the Track table:
     Foreign Keys in the Track Table:
     AlbumId: References the Album table.
     GenreId: References the Genre table.
     MediaTypeId: References the MediaType table.

35. What operator is used to concatenate two fields?
JOIN
AND
||
A: || 
   - used to concatenate (combine) two or more strings or fields.
     {  
      SELECT FirstName || ' ' || LastName AS FullName
      FROM Employees;
     }
   - This query concatenates the FirstName and LastName fields, adding a space between them, to create a FullName.

36. Which symbol concatenates strings?
||
@#
\%
&&
A: ||

37. Which function returns lower case characters?
TRIM()
UPPER THEN LOWER
LOWER()
UPPER()
A: LOWER()



